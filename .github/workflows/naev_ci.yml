on: [push, pull_request]

name: CI

env:
  DESTDIR: "${{ github.workspace }}/dist"
  MESON: "${{ github.workspace }}/source/meson.sh"

jobs:
  "Package_Source":
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Naev Repository
      uses: actions/checkout@v2
      with:
        path: source
        fetch-depth: 0

    - name: Update APT Cache
      run: |
        sudo apt-get update

    - name: Install Additional Build Dependencies
      run: |
        sudo apt-get install \
          automake \
          autopoint \
          autoconf-archive \
          build-essential \
          binutils-dev \
          gettext \
          intltool \
          libsdl2-dev \
          libsdl2-mixer-dev \
          libsdl2-image-dev \
          libgl1-mesa-dev \
          libxml2-dev \
          libfreetype6-dev \
          libpng-dev \
          libopenal-dev \
          libvorbis-dev \
          libiberty-dev \
          ninja-build

    - name:  Package Meson Dist
      run: |
        sh $MESON setup build source -Dexecutable=disabled -Ddocs_c=disabled -Ddocs_lua=disabled
        sh $MESON dist -C build --no-tests --include-subprojects

    - name: Package Autotools Dist
      run: |
          ./autogen.sh
          ./configure
          make dist-gzip
      working-directory: "source"

    - name: Upload Meson Dist Artifact
      uses: actions/upload-artifact@v2
      with:
        name: naikari-meson-dist-${{ github.sha }}
        path: ${{ github.workspace }}/build/meson-dist/*
        if-no-files-found: error

    - name: Upload Autotools Dist Artifact
      uses: actions/upload-artifact@v2
      with:
        name: naikari-autotools-dist-${{ github.sha }}
        path: ${{ github.workspace }}/source/naikari-*.tar.gz
        if-no-files-found: error

  "Meson_Compile_Naev":
    needs: "Package_Source"

    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-16.04
            shell: bash
            config: linux.ini
            pkg-config-path: "[]"

          - os: ubuntu-18.04
            shell: bash
            config: linux.ini
            pkg-config-path: "[]"

          - os: ubuntu-20.04
            shell: bash
            config: linux.ini
            pkg-config-path: "[]"

          - os: windows-latest
            shell: msys2 {0}
            config: windows.ini
            pkg-config-path: "[]"
            
    defaults:
      run:
        shell: ${{ matrix.shell }}

    runs-on: ${{ matrix.os }}

    steps:
    - name: Update APT Cache
      if: ${{ runner.os == 'Linux'}}
      run: |
        sudo apt-get update

    - name: Install Additional Build Dependencies
      if: ${{ runner.os == 'Linux'}}
      run: |
        sudo apt-get install \
          autopoint \
          binutils-dev \
          build-essential \
          gettext \
          intltool \
          libfreetype6-dev \
          libgl1-mesa-dev \
          libiberty-dev \
          libopenal-dev \
          libpng-dev \
          libsdl2-dev \
          libsdl2-image-dev \
          libsdl2-mixer-dev \
          libvorbis-dev \
          libxml2-dev

    - name: Install Ninja-Build (xenial-backports)
      if: ${{ matrix.os == 'ubuntu-16.04' && runner.os == 'Linux'}}
      run: |
        sudo apt-get -t xenial-backports install \
          ninja-build

    - name: Install Ninja-Build
      if: ${{ matrix.os != 'ubuntu-16.04' && runner.os == 'Linux'}}
      run: |
        sudo apt-get install \
          ninja-build

    - name: Install MinGW Packages
      if: ${{ runner.os == 'Windows'}}
      uses: msys2/setup-msys2@v2
      with:
        msystem: MINGW64
        update: true
        path-type: strict
        install: git tar mingw-w64-x86_64-clang mingw-w64-x86_64-freetype mingw-w64-x86_64-libvorbis mingw-w64-x86_64-libxml2 mingw-w64-x86_64-luajit mingw-w64-x86_64-mesa mingw-w64-x86_64-meson mingw-w64-x86_64-ninja mingw-w64-x86_64-openal mingw-w64-x86_64-pkg-config mingw-w64-x86_64-SDL2 mingw-w64-x86_64-SDL2_mixer mingw-w64-x86_64-suitesparse

    - name: Get Source
      uses: actions/download-artifact@v2
      with:
        name: naikari-meson-dist-${{ github.sha }}

    - name: Extract Source
      run: |
        mkdir source
        tar -xf naikari-*.tar.xz -C source --strip 1

    - name: Meson Setup
      id: setup
      run: |
        sh $MESON setup build source \
            --native-file='source/utils/build/${{ matrix.config }}' \
            --buildtype=release \
            --pkg-config-path=${{ matrix.pkg-config-path }} \
            -Db_lto=true \
            -Dauto_features=enabled \
            -Ddocs_c=disabled \
            -Ddocs_lua=disabled

    - name: Upload Setup Log
      uses: actions/upload-artifact@v2
      if: ${{ success() || steps.setup.outcome == 'failure' }}
      with:
        name: ${{ matrix.os }}-meson-${{ github.sha }}-setup-log
        path: ${{ github.workspace }}/build/meson-logs/meson-log.txt
        if-no-files-found: ignore

    - name: Meson Compile
      id: compile
      run: |
        sh $MESON compile -C build

    - name: Upload Compile Log
      uses: actions/upload-artifact@v2
      if: ${{ success() || steps.compile.outcome == 'failure' }}
      with:
        name: ${{ matrix.os }}-meson-${{ github.sha }}-compile-log
        path: ${{ github.workspace }}/build/meson-logs/meson-log.txt
        if-no-files-found: ignore

    - name: Package
      run: |
        sh $MESON install -C build
        tar -cf naikari-meson-${{ matrix.os }}-${{ github.sha }}.tar dist

    - name: Upload Meson Artifact
      uses: actions/upload-artifact@v2
      with:
        name: naikari-${{ matrix.os }}-meson-${{ github.sha }}
        path: "${{ github.workspace }}/*.tar"
        if-no-files-found: error

  "Autotools_Compile_Naev":
    needs: "Package_Source"

    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-16.04
            shell: bash
            config: linux.ini
            pkg-config-path: "[]"

          - os: ubuntu-18.04
            shell: bash
            config: linux.ini
            pkg-config-path: "[]"

          - os: ubuntu-20.04
            shell: bash
            config: linux.ini
            pkg-config-path: "[]"

          - os: windows-latest
            shell: msys2 {0}
            config: windows.ini
            pkg-config-path: "[]"

    defaults:
      run:
        shell: ${{ matrix.shell }}

    runs-on: ${{ matrix.os }}

    steps:
    - name: Update APT Cache
      if: ${{ runner.os == 'Linux'}}
      run: |
        sudo apt-get update

    - name: Install Additional Build Dependencies
      if: ${{ runner.os == 'Linux'}}
      run: |
        sudo apt-get install \
          build-essential \
          automake \
          autopoint \
          autoconf-archive \
          binutils-dev \
          gettext \
          intltool \
          libsdl2-dev \
          libsdl2-mixer-dev \
          libsdl2-image-dev \
          libgl1-mesa-dev \
          libglu1-mesa-dev \
          libxml2-dev \
          libfreetype6-dev \
          libpng-dev \
          libopenal-dev \
          libvorbis-dev \
          libiberty-dev 

    - name: Install MinGW Packages
      if: ${{ runner.os == 'Windows'}}
      uses: msys2/setup-msys2@v2
      with:
        msystem: MINGW64
        update: true
        path-type: strict
        install: mingw-w64-x86_64-libtool mingw-w64-x86_64-toolchain mingw-w64-x86_64-gcc mingw-w64-x86_64-SDL2 mingw-w64-x86_64-SDL2_mixer mingw-w64-x86_64-SDL2_image mingw-w64-x86_64-libxml2 mingw-w64-x86_64-libpng mingw-w64-x86_64-openal mingw-w64-x86_64-libvorbis mingw-w64-x86_64-binutils mingw-w64-x86_64-freetype mingw-w64-x86_64-gettext mingw-w64-x86_64-luajit mingw-w64-x86_64-pkg-config libtool autoconf autoconf-archive automake automake-wrapper git gettext pkg-config make intltool itstool

    - name: Get Source
      uses: actions/download-artifact@v2
      with:
        name: naikari-autotools-dist-${{ github.sha }}

    - name: Extract Source
      run: |
        mkdir source
        tar -xf naikari-*.tar.gz -C source --strip 1

    - name: Autotools Setup
      run: |
        ./configure
      working-directory: source

    - name: Autotools Compile
      run: |
        make -j"$(nproc)"
      working-directory: source

    - name: Autotools Package
      run: |
        pushd source
        make install
        popd
        tar -cf naikari-${{ matrix.os }}-autotools-${{ github.sha }}.tar dist

    - name: Upload Autotools Artifact
      uses: actions/upload-artifact@v2
      with:
        name: naikari-${{ matrix.os }}-autotools-${{ github.sha }}
        path: "${{ github.workspace }}/*.tar"
        if-no-files-found: error

  "AppImage_Compile_Naev":
    needs: "Package_Source"

    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-16.04
            buildtype: meson
          - os: ubuntu-16.04
            buildtype: autotools

    runs-on: ${{ matrix.os }}

    steps:
    - name: Update APT Cache
      if: ${{ runner.os == 'Linux'}}
      run: |
        sudo apt-get update

    - name: Install Additional Build Dependencies
      if: ${{ runner.os == 'Linux'}}
      run: |
        sudo apt-get install \
          autopoint \
          automake \
          autoconf-archive \
          binutils-dev \
          build-essential \
          gettext \
          intltool \
          libfreetype6-dev \
          libgl1-mesa-dev \
          libiberty-dev \
          libluajit-5.1-dev \
          libopenal-dev \
          libpng-dev \
          libsdl2-dev \
          libsdl2-image-dev \
          libsdl2-mixer-dev \
          libsuitesparse-dev \
          libvorbis-dev \
          libxml2-dev

    - name: Install Ninja-Build (xenial-backports)
      if: ${{ matrix.os == 'ubuntu-16.04' && runner.os == 'Linux'}}
      run: |
        sudo apt-get -t xenial-backports install \
          ninja-build

    - name: Install Ninja-Build
      if: ${{ matrix.os != 'ubuntu-16.04' && runner.os == 'Linux'}}
      run: |
        sudo apt-get install \
          ninja-build

    - name: Get Source
      uses: actions/download-artifact@v2
      with:
        name: naikari-meson-dist-${{ github.sha }}

    - name: Extract Source
      run: |
        mkdir source
        tar -xf naikari-*.tar.xz -C source --strip 1

    - name: Compile AppImage Autotools
      if: ${{ matrix.buildtype == 'autotools' }}
      id: autotoolsCompile
      run: |
        ./source/utils/buildAppImage.sh -s "source" -b "source" -o "${{ env.DESTDIR }}" |& tee -a appImageBuildLog.txt

    - name: Compile AppImage Meson
      if: ${{ matrix.buildtype == 'meson' }}
      id: mesonCompile
      run: |
        ./source/utils/buildAppImage.sh -m -s "source" -b "build" -o "${{ env.DESTDIR }}" |& tee -a appImageBuildLog.txt

    - name: Upload Compile Log
      uses: actions/upload-artifact@v2
      if: ${{ (success() || steps.mesonCompile.outcome == 'failure' || steps.autotoolsCompile.outcome == 'failure') }}
      with:
        name: ${{ matrix.os }}-${{ github.sha }}-${{ matrix.buildtype }}AppImageBuild-log
        path: ${{ github.workspace }}/appImageBuildLog.txt
        if-no-files-found: ignore

    - name: Upload Artifact
      uses: actions/upload-artifact@v2
      with:
        name: naikari-${{ matrix.os }}-${{ matrix.buildtype }}AppImage-${{ github.sha }}
        path: "${{ env.DESTDIR }}/out/*.AppImage"
        if-no-files-found: error

  "Documentation":
    runs-on: ubuntu-latest
    needs: "Package_Source"

    steps:
    - name: Update APT Cache
      run: |
        sudo apt-get update
    - name: Install Additional Build Dependencies
      run: |
        sudo apt-get install \
          lua-ldoc \
          graphviz \
          doxygen \
          ninja-build
    - name: Get Source
      uses: actions/download-artifact@v2
      with:
        name: naikari-meson-dist-${{ github.sha }}

    - name: Extract Source
      run: |
        mkdir source
        tar -xf naikari-*.tar.xz -C source --strip 1

    - name: Meson Build
      run: |
        sh $MESON setup build source \
            -Dexecutable=disabled
             
    - name: Package
      run: |
        sh $MESON install -C build
        tar -cf ${{ github.workspace }}/naikari-docs-${{ github.sha }}.tar ${{ env.DESTDIR }}/usr/local/doc/naikari

    - name: Upload Artifact
      uses: actions/upload-artifact@v2
      with:
        name: naikari-docs-${{ github.sha }}
        path: ${{ github.workspace }}/*.tar
        if-no-files-found: error
