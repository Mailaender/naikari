on:
  push:
    tags:   
      - '!v*.*.*'
      - 'v*.*.*-beta*'

name: Pre-Release

jobs:
  "Windows-MinGW64":
    runs-on: windows-latest

    defaults:
      run:
        shell: msys2 {0}

    steps:
    - name: Setup MINGW64 Environment
      uses: msys2/setup-msys2@v2
      with:
        msystem: MINGW64
        update: true
        install: mingw-w64-x86_64-libtool mingw-w64-x86_64-toolchain mingw-w64-x86_64-gcc mingw-w64-x86_64-SDL2 mingw-w64-x86_64-SDL2_mixer mingw-w64-x86_64-SDL2_image mingw-w64-x86_64-libxml2 mingw-w64-x86_64-libpng mingw-w64-x86_64-openal mingw-w64-x86_64-libvorbis mingw-w64-x86_64-binutils mingw-w64-x86_64-freetype mingw-w64-x86_64-gettext mingw-w64-x86_64-luajit mingw-w64-x86_64-nsis mingw-w64-x86_64-pkg-config libtool autoconf autoconf-archive automake automake-wrapper git gettext pkg-config make intltool zip unzip python3-pip itstool

    - name: Checkout Naikari Repository
      uses: actions/checkout@v2

    - name: Build Naikari on Win64
      run: |
        ./autogen.sh
        ./configure --disable-debug
        make -j$(nproc --all)
      env:
        CFLAGS: "-O3"

    - name: Build Windows Installer
      run: |
        ./extras/windows/packageWindows.sh

    - name: Upload Artifact
      uses: actions/upload-artifact@v2
      with:
        name: win64
        path: |
          ${{ github.workspace }}/dist/release/naikari-win64.exe

  "Linux-x86_64":
    runs-on: ubuntu-latest

    steps:
    - name: Update APT Cache
      run: |
        sudo apt-get update

    - name: Install Build Dependencies
      run: |
        sudo apt-get install \
          build-essential \
          automake \
          autoconf-archive \
          binutils-dev \
          libsdl2-dev \
          libsdl2-mixer-dev \
          libsdl2-image-dev \
          libgl1-mesa-dev \
          libglu1-mesa-dev \
          libxml2-dev \
          libfreetype6-dev \
          libpng-dev \
          libopenal-dev \
          libvorbis-dev \
          libiberty-dev \
          gettext \
          autopoint \
          intltool

    - name: Checkout Naikari Repository
      uses: actions/checkout@v2

    - name: Build Naikari on Linux64
      run: |
        ./autogen.sh
        ./configure --disable-debug --build=x86_64-linux-gnu --host=x86_64-linux-gnu
        make -j$(nproc --all)
      env:
        CFLAGS: "-O3"

    - name: Package Linux64 Release
      run: |
        chmod +x src/naikari

        VERSION="$(cat dat/VERSION)"

        mkdir -p dist/release/naikari-$VERSION-linux-x86-64
        mkdir -p dist/release/tar

        mv src/naikari dist/release/naikari-$VERSION-linux-x86-64/naikari-$VERSION-linux-x86-64
        chmod +x dist/release/naikari-$VERSION-linux-x86-64/naikari-$VERSION-linux-x86-64

        cp -r dat/ dist/release/naikari-$VERSION-linux-x86-64

        cd dist/release
        tar -czvf linux-x86-64.tar.gz naikari-$VERSION-linux-x86-64
        mv linux-x86-64.tar.gz tar/

    - name: Upload Artifact
      uses: actions/upload-artifact@v2
      with:
        name: linux-x86-64
        path: ${{ github.workspace }}/dist/release/tar/linux-x86-64.tar.gz

  "Generate-Source":
      runs-on: ubuntu-latest

      steps:
      - name: Update APT Cache
        run: |
          sudo apt-get update

      - name: Install Build Dependencies
        run: |
          sudo apt-get install \
            build-essential \
            automake \
            autoconf-archive \
            libsdl2-dev \
            libsdl2-mixer-dev \
            libsdl2-image-dev \
            libgl1-mesa-dev \
            libxml2-dev \
            libfreetype6-dev \
            libpng-dev \
            libopenal-dev \
            libvorbis-dev \
            binutils-dev \
            libiberty-dev \
            gettext \
            autopoint \
            intltool

      - name: Checkout Naikari Repository
        uses: actions/checkout@v2

      - name: Generate source archive
        run: |
          ./autogen.sh
          ./configure
          make dist-gzip

      - name: Check if source archive is valid
        run: |
          # This currently doesn't work correctly.
          # make distcheck

      - name: Prepare source artifact
        run: |
          make dat/VERSION
          VERSION="$(cat dat/VERSION)"
          mkdir -p dist/release
          mv naikari-$VERSION.tar.gz dist/release/source.tar.gz

      - name: Upload Artifact
        uses: actions/upload-artifact@v2
        with:
          name: source
          path: ${{ github.workspace }}/dist/release/source.tar.gz

  "Upload-Release":
      runs-on: ubuntu-latest
      needs: [Linux-x86_64, Windows-MinGW64, Generate-Source]
      if: ${{ github.repository == 'naikari/naikari' }}

      steps:
      - name: Update APT Cache
        run: |
          sudo apt-get update

      - name: Install Build Dependencies
        run: |
          sudo apt-get install \
            build-essential \
            automake \
            autoconf-archive \
            libsdl2-dev \
            libsdl2-mixer-dev \
            libsdl2-image-dev \
            libgl1-mesa-dev \
            libxml2-dev \
            libfreetype6-dev \
            libpng-dev \
            libopenal-dev \
            libvorbis-dev \
            binutils-dev \
            libiberty-dev \
            gettext \
            autopoint \
            intltool

      - name: Checkout Naikari Repository
        uses: actions/checkout@v2

      - name: Get VERSION
        run: |
          ./autogen.sh
          ./configure
          make dat/VERSION

      - name: Create Release Staging Area
        run: |
          mkdir -p dist/release

      - name: Download Build Artifacts
        uses: actions/download-artifact@v2
        with:
          path: ${{ github.workspace }}/dist

      - name: Collect files for distribution
        run: |
          mv dist/linux-x86-64/linux-x86-64.tar.gz dist/release/naikari-$VERSION-linux-x86-64.tar.gz
          mv dist/win64/naikari-win64.exe dist/release/naikari-$VERSION-win64.exe
          mv dist/source/source.tar.gz dist/release/naikari-$VERSION-source.tar.gz

      - name: Upload Release Assets
        uses: "marvinpinto/action-automatic-releases@latest"
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          prerelease: true
          files: |
            ${{ github.workspace }}/dist/release/*
