on:
  repository_dispatch:
    types: manual-nightly
  schedule:
    - cron: "0 0 * * *"

name: Nightly Release

jobs:
  "Package_Source":
    runs-on: ubuntu-latest

    container:
      image: projectsynchro/synchros_sexy_docker_images:naev-ubuntu1604

    steps:
      - name: Checkout Naev Repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          path: source
          submodules: true

      - name: Package Dist
        run: |
          meson setup build source -Dexecutable=disabled -Ddocs_c=disabled -Ddocs_lua=disabled
          meson dist -C build --no-tests --include-subprojects

      - name: Collect Artifacts
        run: |
          mkdir -p dist/out
          mv build/meson-dist/naikari-*.tar.xz dist/out/source.tar.xz
          cp source/dat/VERSION dist/out

      - name: Upload Source Artifact
        uses: actions/upload-artifact@v2
        with:
          name: naikari-dist
          path: ${{ github.workspace }}/dist/out/source.tar.xz
          if-no-files-found: error

      - name: Upload Version Artifact
        uses: actions/upload-artifact@v2
        with:
          name: naikari-version
          path: ${{ github.workspace }}/dist/out/VERSION
          if-no-files-found: error

  "Linux_Naev_Release":
    needs: "Package_Source"
    runs-on: ubuntu-latest

    container:
      image: projectsynchro/synchros_sexy_docker_images:naev-ubuntu1604

    steps:
      - name: Get Source
        uses: actions/download-artifact@v2
        with:
          name: naikari-dist

      - name: Extract Source
        run: |
          mkdir source
          tar -xf source.tar.xz -C source --strip 1

      - name: Compile AppImage
        id: appimageCompile
        run: |
          ./source/utils/buildAppImage.sh -m -s "source" -b "build" -o "${{ env.DESTDIR }}"
        env:
          APPIMAGE_EXTRACT_AND_RUN: 1

      - name: Upload Artifact
        uses: actions/upload-artifact@v2
        with:
          name: naikari-linux-x86-64
          path: "${{ env.DESTDIR }}/out/*.AppImage"

  "Windows_Naev_Release":
    needs: "Package_Source"
    runs-on: ubuntu-latest

    env:
      WINEPREFIX: "/tmp/.wine"

    container:
      image: projectsynchro/synchros_sexy_docker_images:naev-windows

    steps:
      - name: Container-specific setup
        run: |
          echo /usr/lib/mxe/usr/bin >> $GITHUB_PATH

      - name: Get Source
        uses: actions/download-artifact@v2
        with:
          name: naikari-dist

      - name: Extract Source
        run: |
          mkdir source
          tar -xf source.tar.xz -C source --strip 1

      - name: Meson Setup
        run: |
          meson setup build source \
            --cross-file='source/utils/build/windows_cross_mxe.ini' \
            --buildtype=release \
            -Db_lto=true \
            -Dauto_features=enabled \
            -Ddocs_c=disabled \
            -Ddocs_lua=disabled

      - name: Meson Compile
        run: |
          meson compile -C build
          meson compile -C build naev-gmo

      - name: Build Windows Installer
        run: |
          ./source/extras/windows/packageWindows.sh -n -s "source" -b "build" -o "$(pwd)/dist"

      - name: Upload Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: naikari-win64
          path: ${{ github.workspace }}/dist/out/*
          if-no-files-found: error

  "Upload_Naev_Release":
    strategy:
      fail-fast: true
      matrix:
        include:
          - releasetype: github

    runs-on: ubuntu-latest
    needs:
      [
        Package_Source,
        Linux_Naev_Release,
        Windows_Naev_Release,
      ]
    if: ${{ github.repository == 'naikari/naikari' }}

    steps:
      - name: Checkout Naev Repository
        uses: actions/checkout@v2
        if: ${{ matrix.releasetype == 'github' }}

      - name: Generate commit changelog
        uses: Bullrich/generate-release-changelog@master
        if: ${{ matrix.releasetype == 'github' }}
        id: changelog
        env:
          REPO: ${{ github.repository }}

      - name: Delete old nightly tag and release.
        uses: dev-drprasad/delete-tag-and-release@v0.1.2
        if: ${{ matrix.releasetype == 'github' }}
        with:
          delete_release: true
          tag_name: nightly
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create 'nightly' tag
        uses: EndBug/latest-tag@latest
        if: ${{ matrix.releasetype == 'github' }}
        with:
          tag-name: nightly

      - name: Create Release Staging and Output Areas
        run: |
          mkdir -p {temp,dist/{staging,out/{lin64,win64}}}
        working-directory: ${{ github.workspace }}

      - name: Download Artifacts
        uses: actions/download-artifact@v2
        with:
          path: ${{ github.workspace }}/dist/staging

      - name: Build Github Release
        if: ${{ matrix.releasetype == 'github' }}
        run: |
          BUILD_DATE="$(date +%Y%m%d)"
          VERSION="$(<"dist/staging/naikari-version/VERSION")"
          SUFFIX="$VERSION.$BUILD_DATE"

          mv dist/staging/naikari-linux-x86-64/*.AppImage dist/out/naikari-$SUFFIX-linux-x86-64.AppImage
          mv dist/staging/naikari-win64/naikari*.exe dist/out/naikari-$SUFFIX-win64.exe
          mv dist/staging/naikari-dist/source.tar.xz dist/out/naikari-$SUFFIX-source.tar.xz

          chmod +x dist/out/naikari-$SUFFIX-linux-x86-64.AppImage

      - name: Create Release
        uses: ncipollo/release-action@v1
        if: ${{ matrix.releasetype == 'github' }}
        with:
          artifacts: "${{ github.workspace }}/dist/out/*.*"
          name: "Nightly Build"
          body: |
            ${{ steps.Changelog.outputs.changelog }}
          token: ${{ secrets.GITHUB_TOKEN }}
          prerelease: true
          tag: "nightly"
