ACLOCAL_AMFLAGS = --install -I m4

SUBDIRS = lib src
DIST_SUBDIRS = lib src

if HAVE_UTILS
SUBDIRS += utils
endif # HAVE_NLS
if HAVE_NLS
SUBDIRS += po
DIST_SUBDIRS += po
endif # HAVE_NLS

appicondir = $(datadir)/icons/hicolor/256x256/apps
appicon_DATA = extras/logos/naikari.png
Graphicsdir = $(datadir)/applications
Graphics_DATA = org.naikari.naikari.desktop
appdatadir = $(datadir)/metainfo
appdata_DATA = org.naikari.naikari.metainfo.xml

dist_man6_MANS = naikari.6
dist_doc_DATA = Readme.md LICENSE

if HAVE_UTILS
MKSPR      = $(top_builddir)/utils/mkspr/mkspr$(EXEEXT)
endif
NAEV	     = $(top_builddir)/$(PACKAGE)$(EXEEXT)

VERSIONFILE = $(top_builddir)/dat/VERSION
LICENSEFILE = $(top_builddir)/dat/LICENSE
LANGUAGEFILE = $(top_builddir)/dat/LANGUAGES

EXTRA_DIST = build/config.rpath LICENSE extras dat utils org.naikari.naikari.desktop org.naikari.naikari.metainfo.xml
CLEANFILES = $(NAEV) $(VERSIONFILE) $(LANGUAGEFILE) $(LICENSEFILE)

if HAVE_NLS
XMLFILES    = $(top_srcdir)/po/POTFILES_XML.in
TRANSLATIONITS = $(top_srcdir)/po/its/translation.its
XMLPOT      = $(top_builddir)/po/xml.pot
EXTRA_DIST += $(XMLFILES) $(TRANSLATIONITS)
CLEANFILES += $(XMLPOT)
endif # HAVE_NLS

.PHONY: data pot docs utils help install-ndata soundtrack

all-local: $(NAEV) data

data: pot $(VERSIONFILE) $(LICENSEFILE)

$(LICENSEFILE): $(top_srcdir)/LICENSE
	@echo "  CP    $<"
	cp $< $@

if HAVE_NLS
if HAVE_ITSTOOL
# On windows it seems like '\r' are leaking into filenames and breaking the
# following command, so we use lots of ugly tr instead ¯\_(ツ)_/¯
# xargs -a $(XMLFILES) $(ITSTOOL) -i $(TRANSLATIONITS) > $@
$(XMLPOT): $(XMLFILES) $(TRANSLATIONITS)
	@echo "ITSTOOL $@"
	cat $(XMLFILES) | sed 's@^@$(top_srcdir)/@' | tr '\n' '\0' | tr -d '\r' | xargs -0 $(ITSTOOL) -i $(TRANSLATIONITS) > $@
else # HAVE_ITSTOOL
$(XMLPOT): $(XMLFILES) $(TRANSLATIONITS)
	@echo "XGETTEXT $@"
	$(XGETTEXT) --from-code=UTF-8 --its=$(TRANSLATIONITS) -f $(XMLFILES) -D $(top_srcdir) -o $@
endif # HAVE_ITSTOOL

if HAVE_DATA
pot: $(XMLPOT) $(LANGUAGEFILE)
	$(MAKE) -C po
	$(MAKE) -C po $(PACKAGE).pot
	$(top_srcdir)/utils/gettext.sh $(top_srcdir)

$(LANGUAGEFILE): $(top_srcdir)/po/LINGUAS
	tail -n +2 $< > $@
else # HAVE_DATA
pot:
endif # HAVE_DATA

else # HAVE_NLS
pot:
	@echo "***"
	@echo "*** You must have NLS enabled to compile translation files"
	@echo "***"
endif # HAVE_NLS

$(NAEV):
	@echo "  LN    $(NAEV)"
	$(LN_S) "src/$(NAEV)" "$(NAEV)"

$(VERSIONFILE): src/config.h
	@echo $(VERSION) > $@

if HAVE_UTILS
utils: $(MKSPR)

$(MKSPR):
	$(MAKE) -C utils/mkspr
else # HAVE_UTILS
utils:
endif # HAVE_UTILS

install-data-local:
	(cd $(top_srcdir)/dat; find . -type f -exec install -Dm 644 "{}" "$(DESTDIR)$(pkgdatadir)/dat/{}" \;)

uninstall-hook:
	echo " rm -rf '$(DESTDIR)$(pkgdatadir)'"; \
	echo " rm -rf '$(docdir)'"; \
	rm -rf "$(DESTDIR)$(pkgdatadir)"
	rm -rf "$(docdir)"

docs:
	$(MAKE) -C docs

soundtrack: naikari-$(VERSION)-soundtrack.zip

naikari-$(VERSION)-soundtrack.zip: $(top_srcdir)/utils/soundtrack.py dat/snd/soundtrack.yaml $(VERSIONFILE)
	$(top_srcdir)/utils/soundtrack.py --source-dir=$(top_srcdir)

help:
	@echo "Possible targets are:"
	@echo "        all - builds everything"
	@echo "       docs - creates the doxygen documentation"
	@echo " soundtrack - creates the soundtrack zip file"
	@echo "      clean - removes binaries and object files"
	@echo "    install - installs Naikari"
	@echo "  uninstall - removes previously installed files"
	@echo "  dist-gzip - creates a source tarball with gzip compression"
	@echo " dist-bzip2 - creates a source tarball with bzip2 compression"
	@echo "  distcheck - checks if the created tarball works properly"
	@echo "  distclean - does clean and removes files created by configure"
