on:
  repository_dispatch:
    types: manual-release
  push:
    tags:
      - 'v*.*.*'
      - '!v*.*.*-beta*'

name: Release

jobs:
  "Generate_Source":
    runs-on: ubuntu-latest

    steps:
      - name: Update APT Cache
        run: |
          sudo apt-get update

      - name: Install Build Dependencies
        run: |
          sudo apt-get install \
            automake \
            autopoint \
            autoconf-archive \
            build-essential \
            binutils-dev \
            gettext \
            intltool \
            libsdl2-dev \
            libsdl2-mixer-dev \
            libsdl2-image-dev \
            libgl1-mesa-dev \
            libxml2-dev \
            libfreetype6-dev \
            libpng-dev \
            libopenal-dev \
            libvorbis-dev \
            libiberty-dev

      - name: Checkout Naikari Repository
        uses: actions/checkout@v2
        with:
          submodules: true

      - name: Generate source archive
        run: |
          ./autogen.sh
          ./configure
          make dist-gzip
          make dat/VERSION

      - name: Collect Artifacts
        run: |
          mkdir -p dist/out
          mv naikari-*.tar.gz dist/out/source.tar.gz
          cp dat/VERSION dist/out

      - name: Upload Source Artifact
        uses: actions/upload-artifact@v2
        with:
          name: naikari-dist
          path: ${{ github.workspace }}/dist/out/source.tar.gz
          if-no-files-found: error

      - name: Upload Version Artifact
        uses: actions/upload-artifact@v2
        with:
          name: naikari-version
          path: ${{ github.workspace }}/dist/out/VERSION
          if-no-files-found: error

  "Build_Naev_Release":
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-16.04
            buildoutput: naikari-linux-x86-64
            shell: bash
          - os: windows-latest
            buildoutput: naikari-win64
            shell: msys2 {0}
    
    defaults:
      run:
        shell: ${{ matrix.shell }}
            
    runs-on: ${{ matrix.os }}

    steps:
      - name: Update APT Cache
        if: ${{ runner.os == 'Linux'}}
        run: |
          sudo apt-get update

      - name: Install Build Dependencies
        if: ${{ runner.os == 'Linux'}}
        run: |
          sudo apt-get install \
            automake \
            autopoint \
            autoconf-archive \
            build-essential \
            binutils-dev \
            gettext \
            intltool \
            libsdl2-dev \
            libsdl2-mixer-dev \
            libsdl2-image-dev \
            libgl1-mesa-dev \
            libxml2-dev \
            libfreetype6-dev \
            libpng-dev \
            libopenal-dev \
            libvorbis-dev \
            libiberty-dev
            
      - name: Install MinGW Packages
        if: ${{ runner.os == 'Windows'}}
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          update: true
          install: mingw-w64-x86_64-libtool mingw-w64-x86_64-toolchain mingw-w64-x86_64-gcc mingw-w64-x86_64-SDL2 mingw-w64-x86_64-SDL2_mixer mingw-w64-x86_64-SDL2_image mingw-w64-x86_64-libxml2 mingw-w64-x86_64-libpng mingw-w64-x86_64-openal mingw-w64-x86_64-libvorbis mingw-w64-x86_64-binutils mingw-w64-x86_64-freetype mingw-w64-x86_64-gettext mingw-w64-x86_64-python-pip mingw-w64-x86_64-luajit mingw-w64-x86_64-nsis mingw-w64-x86_64-pkg-config libtool autoconf autoconf-archive automake automake-wrapper git gettext pkg-config make intltool itstool

      - name: Checkout Naev Repository
        uses: actions/checkout@v2
        with:
          submodules: true
          
      - name: Build Naev for Win64
        if: ${{ runner.os == 'Windows'}}
        run: |
          ./autogen.sh
          ./configure --disable-debug
          make -j$(nproc --all)
        env:
          CFLAGS: "-O3"
          
      - name: Build and Package Naev for Linux64
        if: ${{ runner.os == 'Linux'}}
        run: |
          ./utils/buildAppImage.sh -s "$(pwd)" -b "$(pwd)" -o "$(pwd)/dist"
        env:
          CFLAGS: "-O3"
          
      - name: Build Windows Installer
        if: ${{ runner.os == 'Windows'}}
        run: |
          ./extras/windows/packageWindows.sh -s "$(pwd)" -b "$(pwd)" -o "$(pwd)/dist"
          
      - name: Upload Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.buildoutput }}
          path: |
            ${{ github.workspace }}/dist/out/*
          if-no-files-found: error
          
  "Upload_GitHub_Release":
    runs-on: ubuntu-latest
    needs: [Generate_Source, Build_Naev_Release]
    if: ${{ github.repository == 'naikari/naikari' }}

    steps:
      - name: Create Release Staging and Output Areas
        run: |
          mkdir -p dist/{staging,out}

      - name: Download Build Artifacts
        uses: actions/download-artifact@v2
        with:
          path: ${{ github.workspace }}/dist/staging

      - name: Collect files and rename for distribution
        run: |
          BUILD_DATE="$(date +%Y%m%d)"
          VERSION="$(<"dist/staging/naikari-version/VERSION")"
          SUFFIX="$VERSION"

          mv dist/staging/naikari-linux-x86-64/*.AppImage dist/out/naikari-$SUFFIX-linux-x86-64.AppImage
          mv dist/staging/naikari-win64/naikari*.exe dist/out/naikari-$SUFFIX-win64.exe
          mv dist/staging/naikari-dist/source.tar.gz dist/out/naikari-$SUFFIX-source.tar.gz
          
          chmod +x dist/out/naikari-$SUFFIX-linux-x86-64.AppImage

      - name: Upload Release Assets
        uses: "marvinpinto/action-automatic-releases@latest"
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          prerelease: false
          files: |
            ${{ github.workspace }}/dist/out/*
